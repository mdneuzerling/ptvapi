% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/departures.R
\name{departures}
\alias{departures}
\title{Retrieve departures at a stop}
\usage{
departures(
  stop_id,
  route_type,
  route_id = NULL,
  direction_id = NULL,
  datetime = NULL,
  max_results = 5,
  include_cancelled = FALSE,
  user_id = determine_user_id(),
  api_key = determine_api_key()
)
}
\arguments{
\item{stop_id}{An integer stop ID returned by the \code{stops_on_route} or
\code{stops_nearby} functions.}

\item{route_type}{A route type which can be provided either as a non-negative
integer code, or as a character: "Tram", "Train", "Bus", "Vline" or "Night
Bus". Character inputs are not case-sensitive. Use the \code{route_types}
function to extract a vector of all route types.}

\item{route_id}{Optionally filter by a route ID. These can be obtained with
the \code{routes()} function.}

\item{direction_id}{Optionally filter by a direction ID. These can be
obtained with the \code{route_directions()} function.}

\item{datetime}{POSIXct or Character. Optionally filter results to a
datetime. This argument does not behave as expected (see details).
Characters are automatically converted to datetimes, and are assumed to be
given as Melbourne time. Defaults to the current date and time.}

\item{max_results}{Integer. The maximum number of departures to return for
each route_id and direction. This argument behaves in unexpected ways (see
results). Defaults to 5.}

\item{include_cancelled}{Logical. Whether results should be returned if they
have been cancelled. Metropolitan train services only. Defaults to FALSE.}

\item{user_id}{Integer or character. A user ID or devid provided by Public
Transport Victoria. See section "Obtaining API authentication details".}

\item{api_key}{Character. An API key, with dashes, provided by Public
Transport Victoria. See section "Obtaining API authentication details".}
}
\description{
Retrieve departures at a stop
}
\details{
All timestamps returned by this function are in Melbourne time.
}
\section{Filtering by maximum results}{
 The \code{max_results} parameter should be
interpreted with caution --- requesting a maximum of \code{n} results does not
guarantee that the returned tibble will be \code{n} rows per route ID and
departure, and often fewer than \code{n} departures are returned. Be cautious
when providing a value to the \code{route_id} argument as well as to
\code{max_results}, as the results may contain route IDs other than the given
argument. For example, running \code{departures(1071, "Train", route_id = 1, max_results = 1)} will return departures for route 1 (Alamein) with
direction ID 0, but also route 7 (Glen Waverley) with direction ID 1. This
is the behaviour of the API, and so it has been replicated here. If you are
concerned with one route ID only, it is advised to filter the results
accordingly.
}

\section{Filtering by datetime}{
 As documented, the API should provide the
upcoming departures after the given \code{datetime} argument (defaults to the
current time). In practice, the API returns results \emph{around} the given
\code{datetime} argument, roughly 10--15 minutes before and after. The API does
support a \code{look_backwards} parameter (defaults to \code{FALSE}) but it appears
to have no effect on this behaviour, or any effect at all. Therefore, it's
been omitted from the function arguments.
}

